<?xml version="1.0" encoding="UTF-8"?>
<chapter>
  <title>Introduction</title>

  <section>
    <title>Testing Your Code</title>

    <para>How do you currently test code?</para>

    <para>The most obvious means of testing PHP code is to save it to a file
    and browse to it in your web browser. If the output of the script seems
    correct then your test has been successful. A variation on this theme when
    testing functions or classes which don't have direct output is to insert
    var_dump() and echo statements to reveal the content of variables. Another
    variation is interacting with a completed application to check things work
    as expected.</para>

    <para>These methods of testing are extremely easy but they bely a serious
    problem. You cannot easily repeat these same tests without a lot of
    effort.</para>

    <para>Using a framework like PHPSpec allows you to write examples which
    are repeatable. These automatic tests can be executed time and time again
    using a quick command line call or browser refresh. Repeatable testing
    however is not where it all ends.</para>
  </section>

  <section>
    <title>Source Code Examples As Documentation</title>

    <para>Repeatable tests are all fine and well, but it turns out that they
    also serve another purpose. Just as a picture is worth a thousand words,
    in programming a good example of how to use your code is also worth a
    thousand words. Your repeatable examples, which make great future tests,
    also act as a guide for users and other programmers in how to correctly
    use your source code.</para>

    <para>It's here where I can introduce the idea that the traditional "test"
    of Unit Testing and Test-Driven Development can simply be referred to as
    an example. Each example you write explains one more facet of behaviour
    your source code is capable of, how to make that behaviour occur, and what
    it's effects are. In Behaviour-Driven Development, each such example can
    also be thought of as a specification (or "spec" for short).</para>

    <para>In BDD, which promotes the use of a language more readily readable
    and accessible for coding examples, the value of your specs as
    documentation is improved using a fluent Domain Specific Language.
    Consider the differences which make the second example below more clear
    and legible than the first example.</para>

    <example>
      <title>Example with PHPUnit</title>

      <programlisting role="php">$logger = new Logger;
$this-&gt;assertTrue($logger-&gt;hasFile());</programlisting>
    </example>

    <example>
      <title>Example with PHPSpec</title>

      <programlisting role="php">$logger = new Logger;
$this-&gt;spec($logger)-&gt;should-&gt;haveFile();</programlisting>
    </example>

    <para>Because code examples make for great documentation (not just tests)
    it's better to have examples which follow the natural flow of plain
    English to improve their readability and clarity.</para>

    <para>Before we continue, remember that BDD is not TDD with "should"
    instead of "assert". There are bigger reasons for BDD besides a simple
    language differential from TDD.</para>
  </section>

  <section>
    <title>Writing Examples (Specs) Before Writing Code</title>

    <para>As we move up the chain of practices, we eventually reach a point
    where we have an epiphany. If our examples/tests make such great
    documentation, describe the behaviour of our classes and applications, and
    are repeatable over and over, then what if instead of writing pages of
    planning documentation we just write some examples first, and then write
    the code to agree to them?</para>

    <para>This approach is where Test-Driven Development enters the fray, with
    the infamous warcry of "Test first!". Since PHPSpec is a Behaviour-Driven
    Development framework we'll replace this with a "Spec first!" cry.</para>

    <section>
      <title>Why Write Examples First?</title>

      <para>The reasoning behind writing examples first is really
      simple.</para>

      <para>The first effect is to force us to face the problem at hand and
      make us think about what we're doing. It's all too easy to just start
      coding without a firm idea and get lost before you've even written your
      first spec or test. I'm sure we've all been there more than once!
      Writing an example on the other hand means we have to immediately start
      looking at how the public API will work, how the logic flows between
      components, the range of output we really need, the logic we may require
      for an implementation.</para>

      <para>The second effect is that doing this in small steps lets us write
      better code. The code resulting from the structured repetition of small
      steps - specify, write example, write implementing code, refactor, and
      rewind - leads to code which has a superior design, is more easily
      maintained, is usually simpler and clearer, and will generally have
      fewer bugs as a result.</para>

      <para>There are lots of other advantages, but perhaps the best one is
      confidence. Improved confidence in your design, your code quality, your
      own skills as a programmer, your complete fearlessness when faced with
      change, and let's not forget the confidence other programmers and users
      will have in well designed and tested source code.</para>
    </section>

    <section>
      <title>The Workflow of BDD using PHPSpec</title>

      <para>1. Idenitify a valuable behaviour you want to implement.</para>

      <para>2. Describe it in plain text in the form "it should ...", i.e. a
      specification.</para>

      <para>3. Write a one or more specs/examples for the "it should"
      components of your specification.</para>

      <para>4. Implement the behaviour you've just described.</para>

      <para>5. Refactor the implemented code if needed.</para>

      <para>6 Return to step 1.</para>

      <para>We'll cover this in greater detail when explaining exactly what
      Behaviour-Driven Development is later.</para>
    </section>
  </section>
</chapter>